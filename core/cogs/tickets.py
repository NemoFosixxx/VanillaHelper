import disnake
import aiosqlite as sq
import asyncio
from disnake.ext import commands
import yaml
import logging
from mcrcon import MCRcon
from database.wh_database import add_to_db
from database.ticket_database import add_to_ticket_db, db_ticket_start, get_ticket_info_by_channel_id

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–≥—Ä—É–∑ –∫–æ–Ω—Ñ–∏–≥–æ–≤
file_path = 'config.yml'
with open(file_path, 'r') as file:
    config = yaml.safe_load(file)

class TicketsForming(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.bot.loop.create_task(self.db_ticket_start())
        self.whitelist_support = config.get('whitelist_role_id')
        self.category_wh = "Whitelist"
        self.category_complaints = "–ñ–∞–ª–æ–±—ã"
        self.button_nickname = None
        self.user_button_id = None
        
    async def db_ticket_start(self):
        try:
            await db_ticket_start()
        except Exception as e:
            logger.error(f"Database initialization failed: {e}")

    def _send_rcon_command_sync(self, command):
        try:
            rcon_host = config.get('rcon_host')
            rcon_password = config.get('rcon_password')
            rcon_port = config.get('rcon_port')
            
            with MCRcon(rcon_host, rcon_password, rcon_port) as mcr:
                response = mcr.command(command)
                return response
        except Exception as e:
            return str(e)

    @commands.slash_command(description="–°–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤", name='setup')
    @commands.has_role(config.get('bot_admin'))
    async def setup(self, inter: disnake.ApplicationCommandInteraction):
        pass

    @setup.sub_command(description="–°–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–∏–∫–µ—Ç–∞–º–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç", name="whitelist")
    @commands.has_role(config.get('bot_admin'))
    async def setup_whitelist(self, inter: disnake.ApplicationCommandInteraction):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        category_wh = self.category_wh
        category = disnake.utils.get(inter.guild.categories, name=category_wh)
        if category is None:
            category = await inter.guild.create_category(name=category_wh)

        # –í—ã–∑–æ–≤ —ç–º–±–µ–¥–∞
        embed = disnake.Embed(
            title='–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
            description='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ñ–º—è–∫–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
            color=disnake.Color(0x7857be)
        )
        embed.set_image(url='https://cdn.discordapp.com/attachments/415752039713472513/1288380944717447178/Frame_18_1.png?ex=66f4f9c2&is=66f3a842&hm=b646da682098763bd4e98f6f49c27f13af6004e4e2f33f6aa547ae6563d9dd5a&')
        await inter.send(
            embed=embed,
            components=[
                disnake.ui.Button(label="üíñ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä!", style=disnake.ButtonStyle.success, custom_id="open"),
            ],
        )

    @commands.Cog.listener()
    async def on_interaction(self, inter: disnake.Interaction):
        if inter.type == disnake.InteractionType.component:
            if inter.component.custom_id == "open":
                # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
                modal = disnake.ui.Modal(
                    title="–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏",
                    custom_id="whitelist_form",
                    components=[
                        disnake.ui.TextInput(
                            label="–ù–ò–ö –í –ú–ê–ô–ù–ö–†–ê–§–¢–ï",
                            placeholder="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞ - 16 —Å–∏–º–≤–æ–ª–æ–≤.",
                            custom_id="nickname",
                            style=disnake.TextInputStyle.short,
                            max_length=16,
                            required=True
                        ),
                        disnake.ui.TextInput(
                            label="–ß–ï–ú –ü–õ–ê–ù–ò–†–£–ï–¢–ï –ó–ê–ù–ò–ú–ê–¢–¨–°–Ø –ù–ê –°–ï–†–í–ï–†–ï?",
                            placeholder="–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ - —Ç–∞–∫ –∏ –ø–∏—à–∏—Ç–µ.",
                            custom_id="plans",
                            style=disnake.TextInputStyle.paragraph,
                            required=True,
                        ),
                        disnake.ui.TextInput(
                            label="–ö–ê–ö –í–´ –ù–ê–®–õ–ò –≠–¢–û–¢ –°–ï–†–í–ï–†?",
                            placeholder="–ß–µ—Ä–µ–∑ –¥—Ä—É–∑–µ–π, –≤–∏–¥–µ–æ/—à–æ—Ä—Ç—Å –∏ —Ç.–ø. –ù–∞–º —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ!",
                            custom_id="search",
                            style=disnake.TextInputStyle.paragraph,
                            required=True,
                        )
                    ]
                )
                await inter.response.send_modal(modal)
                
            elif inter.component.custom_id == "open_complaints":
                complaints_modal = disnake.ui.Modal(
                    title="–ü–æ–¥–∞—á–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                    custom_id="complaints_form",
                    components=[
                        disnake.ui.TextInput(
                            label="–ù–ò–ö –í –ú–ê–ô–ù–ö–†–ê–§–¢–ï",
                            custom_id="nickname",
                            style=disnake.TextInputStyle.short,
                            max_length=16,
                            required=True
                        ),
                        disnake.ui.TextInput(
                            label="–ù–ò–ö–ù–ï–ô–ú –ù–ê–†–£–®–ò–¢–ï–õ–Ø",
                            placeholder="–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, —Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫",
                            custom_id="griefer",
                            style=disnake.TextInputStyle.paragraph,
                            required=True
                        ),
                        disnake.ui.TextInput(
                            label="–í–ê–® –í–û–ü–†–û–°/–ß–¢–û –°–õ–£–ß–ò–õ–û–°–¨",
                            custom_id="question",
                            style=disnake.TextInputStyle.paragraph,
                            required=True
                        )
                    ]
                )
                await inter.response.send_modal(complaints_modal)
                        
    @commands.Cog.listener()
    async def on_modal_submit(self, inter: disnake.ModalInteraction):
        if inter.custom_id == "whitelist_form":
            nickname = inter.text_values["nickname"]
            plans = inter.text_values["plans"]
            search = inter.text_values["search"]
            user = inter.user
            self.user_button_id = str(user.id)
            self.button_nickname = nickname
            category_wh = self.category_wh
            category = disnake.utils.get(inter.guild.categories, name=category_wh)
            if category is None:
                category = await inter.guild.create_category(name=category_wh)

            whitelist_role = inter.guild.get_role(self.whitelist_support)

            overwrites = {
                inter.guild.default_role: disnake.PermissionOverwrite(read_messages=False),
                user: disnake.PermissionOverwrite(
                    read_messages=True, send_messages=True, add_reactions=True, 
                    embed_links=True, attach_files=True, read_message_history=True,
                    external_emojis=True
                ),
                whitelist_role: disnake.PermissionOverwrite(
                    read_messages=True, send_messages=True, add_reactions=True, 
                    embed_links=True, attach_files=True, read_message_history=True,
                    external_emojis=True
                )
            }

            
            whitelist_channel = await inter.guild.create_text_channel(name=f'ticket-{user.name}', category=category, overwrites=overwrites)
            whitelist_channel_id = whitelist_channel.id


            await inter.send(f'–¢–≤–æ–π —Ç–∏–∫–µ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω! <#{whitelist_channel_id}>', ephemeral=True)
            await whitelist_channel.send(f'{user.mention} <@&{self.whitelist_support}>', delete_after=1)

            embed2 = disnake.Embed(
                title='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏!',
                description='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞! –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ —á–∞—Å–∞.',
                color=disnake.Color(0x7857be)
            )
            embed2.add_field(name="–ù–∏–∫ –≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ", value=nickname, inline=False)
            embed2.add_field(name="–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?", value=plans, inline=False)
            embed2.add_field(name="–ö–∞–∫ –≤—ã –Ω–∞—à–ª–∏ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä?", value=search, inline=False)

            message = await whitelist_channel.send(embed=embed2, components=[
                disnake.ui.Button(label="–î–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç", style=disnake.ButtonStyle.primary, custom_id="whitelist_add"),
                disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=disnake.ButtonStyle.danger, custom_id="close_ticket")
            ])
            await message.pin()
            
            #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥
            try:
                await add_to_ticket_db(nickname=nickname, user_id=user.id, channel_id=whitelist_channel_id)
            except Exception as e:
                await inter.send(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}", ephemeral=True)
            

        elif inter.custom_id == "complaints_form":
            nickname = inter.text_values["nickname"]
            griefer = inter.text_values["griefer"]
            question = inter.text_values["question"]
            user = inter.user
            self.user_button_id = str(user.id)
            self.button_nickname = nickname
            category_complaints = self.category_complaints
            category = disnake.utils.get(inter.guild.categories, name=category_complaints)
            if category is None:
                category = await inter.guild.create_category(name=category_complaints)
                
            whitelist_role = inter.guild.get_role(self.whitelist_support)

            overwrites = {
                inter.guild.default_role: disnake.PermissionOverwrite(read_messages=False),
                user: disnake.PermissionOverwrite(
                    read_messages=True, send_messages=True, add_reactions=True, 
                    embed_links=True, attach_files=True, read_message_history=True,
                    external_emojis=True
                ),
                whitelist_role: disnake.PermissionOverwrite(
                    read_messages=True, send_messages=True, add_reactions=True, 
                    embed_links=True, attach_files=True, read_message_history=True,
                    external_emojis=True
                )
            }
            
            complaint_channel = await inter.guild.create_text_channel(name=f'ticket-{user.name}', category=category, overwrites=overwrites)
            complaint_channel_id = complaint_channel.id
            
            await inter.send(f'–¢–≤–æ–π —Ç–∏–∫–µ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω! <#{complaint_channel_id}>', ephemeral=True)
            await complaint_channel.send(f'{user.mention} <@&{self.whitelist_support}>', delete_after=1)
            
            embed2 = disnake.Embed(
                title="–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ!",
                description="–í–∞—à —Ç–∏–∫–µ—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω! –û–±—ã—á–Ω–æ —ç—Ç–æ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
                color=disnake.Color(0x7857be)
            )
            embed2.add_field(name="–ù–∏–∫ –≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ", value=nickname, inline=False)
            embed2.add_field(name="–ù–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è", value=griefer, inline=False)
            embed2.add_field(name="–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ/–í–æ–ø—Ä–æ—Å", value=question, inline=False)
            
            message = await complaint_channel.send(embed=embed2, components=[
                disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=disnake.ButtonStyle.danger, custom_id="close_ticket_complaints")
            ])
            await message.pin()

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        try:
            if inter.component.custom_id == "close_ticket_complaints":
                if any(role.id == config.get('whitelist_role_id') for role in inter.user.roles):
                    user = inter.user.name
                    channel = inter.channel.name
                    cmd_channel = self.bot.get_channel(config.get('alert_channel'))
                    await cmd_channel.send(f"–¢–∏–∫–µ—Ç {channel} –±—ã–ª `–∑–∞–∫—Ä—ã—Ç` —Å–ª–µ–¥—É—é—â–∏–º –∞–¥–º–∏–Ω–æ–º: {user}")
                    await inter.send("–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    await asyncio.sleep(3)
                    await inter.channel.delete()
                else:
                    await inter.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏", ephemeral=True)
    
            elif inter.component.custom_id == "close_ticket":
                await inter.send("–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
                await inter.channel.delete()
                
            elif inter.component.custom_id == "whitelist_add":
                logger.info(f"Whitelist add button clicked by user {inter.user.id} ({inter.user.name})")
                #–ó–î–ï–°–¨ –ù–ê–î–û –ò–ó –ë–î –ë–†–ê–¢–¨ –î–ê–ù–ù–´–ï. –ò–°–ö–ê–¢–¨ –ê–ô–î–ò –ö–ê–ù–ê–õ–ê –°–†–ï–î–ò –ë–î –¢–ò–ö–ï–¢–û–í
                if any(role.id == config.get('whitelist_role_id') for role in inter.user.roles):
                    channel_id = inter.channel.id
                    nickname, user_id = await get_ticket_info_by_channel_id(channel_id)

                    if nickname is None:
                        await inter.send('–ü–æ–ª–µ —Å –Ω–∏–∫–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ `/whitelist add`', ephemeral=True)
                        return

                    cmd_channel = self.bot.get_channel(config.get('alert_channel'))
                    user = inter.user.name
                    try:
                        async with sq.connect('whitelist.db') as db:
                            async with db.execute('SELECT nickname FROM whitelist WHERE user_id = ?', (user_id,)) as cursor:
                                row = await cursor.fetchone()
                                if row:
                                    await inter.send(content=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Discord ID {user_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–∏–∫—É {row[0]}.', ephemeral=True)
                                    return

                        response = self._send_rcon_command_sync(f'whitelist add {nickname}')

                        if 'Added' in response:
                            await add_to_db(nickname, user_id)
                            member = inter.guild.get_member(int(user_id))
                            player_role = inter.guild.get_role(config.get('role_id'))
                            if member and player_role:
                                await member.add_roles(player_role)
                                embed = disnake.Embed(
                                    title='–¢—ã –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!',
                                    color=disnake.Color(0x7857be),
                                )
                                embed.add_field(name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ', value='**–ê–π–ø–∏:** voxirealm.fun:20024\n\n**–í–µ—Ä—Å–∏—è:** 1.21-1.21.1 \n\n**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥—ã:** PlasmoVoice –∏ NoEmoteCraft(–≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∏ —ç–º–æ—Ü–∏–∏ –≤ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ). –ï—Å–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –Ω–∞–º - –º—ã –ø–æ–º–æ–∂–µ–º!\n\n –°–±–æ—Ä–∫—É –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∞ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ https://discord.com/channels/1283761458215387228/1283761458819235887\n\n –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–∏–∫–µ—Ç!', inline=False)
                                await inter.send(f'<@{user_id}>', delete_after=1)
                                await inter.send(embed=embed)
                                await inter.edit_original_response(content=f'<@{user_id}> –¢—ã –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!')
                                await cmd_channel.send(f"–ò–≥—Ä–æ–∫ {nickname} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–º –∞–¥–º–∏–Ω–æ–º: {user}")
                            else:
                                await inter.edit_original_response(content='‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –∞–π–¥–∏. –†–æ–ª—å –Ω–µ –≤—ã–¥–∞–Ω–∞. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç–µ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫, –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ‚ö†Ô∏è')
                        else:
                            await inter.edit_original_response(content=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç: {response}')

                        await inter.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!", ephemeral=True)
                    except Exception as e:
                        logger.error(f"Error in whitelist_add: {e}")
                        await inter.edit_original_response(content=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
                    finally:
                        self.button_nickname = None
                        self.user_button_id = None
                else:
                    await inter.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏", ephemeral=True)
        except Exception as e:
            logger.error(f"Error in on_button_click: {e}")
            await inter.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", ephemeral=True)
            
    @setup.sub_command(description="–°–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–∏–∫–µ—Ç–∞–º–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç", name="complaints")
    @commands.has_role(config.get('bot_admin'))
    async def setup_complaints(self, inter: disnake.ApplicationCommandInteraction):
        category_complaints = self.category_complaints
        category = disnake.utils.get(inter.guild.categories, name=category_complaints)
        if category is None:
            category = await inter.guild.create_category(name=category_complaints)
        
        embed = disnake.Embed(
            title='–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã/ –í–æ–ø—Ä–æ—Å–∞ –∫ –∞–¥–º–∏–Ω–∞–º',
            description='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
            color=disnake.Color(0x7857be)
        )
        embed.set_image(url='https://cdn.discordapp.com/attachments/415752039713472513/1288382655418859564/xbouw053Prs.jpg?ex=66f4fb5a&is=66f3a9da&hm=1bfdf0b9e19a1f202accda11cd96f0f27785dde3ee977ad36fbd19c3e1fcb61c&')
        await inter.send(
            embed=embed,
            components=[
                disnake.ui.Button(label="üìÉ –û—Ç–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", style=disnake.ButtonStyle.success, custom_id="open_complaints"),
            ],
        )

def setup(bot: commands.Bot):
    bot.add_cog(TicketsForming(bot))